import React, { useCallback, useRef, useState } from "react";
import { useMutation, useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";

// Simple tailwind card style wrapper
export default function WordPressMigrationSettings() {
  // ----- Convex hooks -----
  const currentUrl = useQuery(api.siteSettings.getSetting, {
    key: "wordpressSiteUrl",
  }) as string | undefined;

  const setSetting = useMutation(api.siteSettings.setSetting);

  // ----- Local state -----
  const [siteUrl, setSiteUrl] = useState(currentUrl || "");
  const [isSavingUrl, setIsSavingUrl] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement | null>(null);

  // ----- Handlers -----
  const saveSiteUrl = useCallback(async () => {
    if (!siteUrl.trim()) return;
    setIsSavingUrl(true);
    try {
      await setSetting({ key: "wordpressSiteUrl", value: siteUrl.trim() });
      alert("✅ WordPress site URL saved");
    } catch (err) {
      console.error(err);
      alert("❌ Failed to save URL");
    } finally {
      setIsSavingUrl(false);
    }
  }, [siteUrl, setSetting]);

  const handleFileUpload = useCallback(
    async (file: File) => {
      setIsUploading(true);
      try {
        const text = await file.text();
        const json = JSON.parse(text);
        const isXml = file.name.toLowerCase().endsWith(".xml");
        const endpoint = isXml ? "/migrate/wp/xml" : "/migrate/wp";
        const body = isXml ? JSON.stringify({ xml: text }) : JSON.stringify({ data: json });
        const res = await fetch(endpoint, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body,
        });
        if (!res.ok) {
          throw new Error(await res.text());
        }
        const result = await res.json();
        alert(
          `✅ Import complete!\nPosts: ${result.summary.posts}\nPages: ${result.summary.pages}`
        );
      } catch (err: any) {
        console.error(err);
        alert(`❌ Upload failed: ${err.message || err}`);
      } finally {
        setIsUploading(false);
        if (fileInputRef.current) fileInputRef.current.value = "";
      }
    },
    []
  );

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) handleFileUpload(file);
  };

  // --- JSX ---
  return (
    <section className="bg-white shadow rounded-lg p-6 space-y-8">
      <header>
        <h2 className="text-xl font-semibold text-gray-900">
          WordPress Migration
        </h2>
        <p className="text-gray-500 text-sm">
          Connect your existing WordPress site or manually upload an export to
          import content into FastPress.
        </p>
      </header>

      {/* Connect to WP site */}
      <div className="space-y-3">
        <label className="block text-sm font-medium text-gray-700">
          WordPress Site URL
        </label>
        <div className="flex gap-3">
          <input
            type="url"
            placeholder="https://example.com"
            value={siteUrl}
            onChange={(e) => setSiteUrl(e.target.value)}
            className="flex-1 rounded-md border-gray-300 shadow-sm focus:ring-blue-500 focus:border-blue-500"
          />
          <button
            onClick={saveSiteUrl}
            disabled={isSavingUrl}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-60"
          >
            {isSavingUrl ? "Saving…" : "Save"}
          </button>
        </div>
        <p className="text-xs text-gray-500">
          This is stored in Site Settings and can be used by future automated
          migration tools.
        </p>
      </div>

      {/* Manual upload */}
      <div className="space-y-3">
        <label className="block text-sm font-medium text-gray-700">
          Manual Import
        </label>
        <input
          ref={fileInputRef}
          type="file"
          accept=".json,application/json,.xml,text/xml"
          onChange={handleFileSelect}
          className="block text-sm"
          disabled={isUploading}
        />
        <p className="text-xs text-gray-500">
          Upload a JSON export generated by the <code>migrate-wp</code> script.
          Larger files may take a minute to process.
        </p>
      </div>
    </section>
  );
}